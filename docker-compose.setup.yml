# version: '3.8'  # Version is obsolete in Docker Compose v2+

# Rendiff with First-Run Setup Support
# This compose file includes automatic setup and configuration

services:
  # API Service with Setup
  api:
    build: 
      context: .
      dockerfile: docker/api/Dockerfile
    container_name: rendiff-api
    ports:
      - "${API_PORT:-8080}:8080"
    environment:
      # Basic Configuration
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=${API_PORT:-8080}
      - API_WORKERS=${API_WORKERS:-4}
      - EXTERNAL_URL=${EXTERNAL_URL:-http://localhost:8080}
      
      # Setup Configuration
      - RENDIFF_AUTO_SETUP=${RENDIFF_AUTO_SETUP:-false}
      - ENABLE_API_KEYS=${ENABLE_API_KEYS:-true}
      - RENDIFF_API_KEY=${RENDIFF_API_KEY:-}
      
      # Storage Configuration
      - STORAGE_DEFAULT_BACKEND=${STORAGE_DEFAULT_BACKEND:-local}
      - STORAGE_LOCAL_PATH=${STORAGE_LOCAL_PATH:-/storage}
      - STORAGE_INPUT_BACKENDS=${STORAGE_INPUT_BACKENDS:-local}
      - STORAGE_OUTPUT_BACKENDS=${STORAGE_OUTPUT_BACKENDS:-local}
      - STORAGE_RETENTION=${STORAGE_RETENTION:-7d}
      
      # Database Configuration
      - DATABASE_URL=${DATABASE_URL:-sqlite+aiosqlite:///data/rendiff.db}
      
      # Resource Limits
      - MAX_UPLOAD_SIZE=${MAX_UPLOAD_SIZE:-10737418240}
      - MAX_CONCURRENT_JOBS_PER_KEY=${MAX_CONCURRENT_JOBS_PER_KEY:-10}
      - MAX_JOB_DURATION=${MAX_JOB_DURATION:-3600}
      
      # AWS S3 Configuration (optional)
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET:-}
      - AWS_S3_REGION=${AWS_S3_REGION:-us-east-1}
      - AWS_S3_ENDPOINT=${AWS_S3_ENDPOINT:-https://s3.amazonaws.com}
      - AWS_S3_PATH_STYLE=${AWS_S3_PATH_STYLE:-false}
      
      # Azure Storage Configuration (optional)
      - AZURE_STORAGE_ACCOUNT=${AZURE_STORAGE_ACCOUNT:-}
      - AZURE_STORAGE_KEY=${AZURE_STORAGE_KEY:-}
      - AZURE_CONTAINER=${AZURE_CONTAINER:-}
      
      # GCS Configuration (optional)
      - GCP_PROJECT_ID=${GCP_PROJECT_ID:-}
      - GCS_BUCKET=${GCS_BUCKET:-}
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS:-}
      
      # Redis Configuration
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      
    volumes:
      - ./config:/config
      - ./data:/data
      - ./storage:/storage
      - ./logs:/app/logs
      # Mount GCP key if provided
      - ${GCP_KEY_FILE:-/dev/null}:/config/gcp-key.json:ro
    depends_on:
      - redis
    entrypoint: ["/app/scripts/docker-entrypoint.sh", "api"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # CPU Workers
  worker-cpu:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
      args:
        WORKER_TYPE: cpu
    deploy:
      replicas: ${CPU_WORKERS:-2}
    environment:
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - DATABASE_URL=${DATABASE_URL:-sqlite+aiosqlite:///data/rendiff.db}
      - EXTERNAL_URL=${EXTERNAL_URL:-http://localhost:8080}
      - WORKER_TYPE=cpu
    volumes:
      - ./config:/config:ro
      - ./data:/data
      - ./storage:/storage
      - ./tmp:/tmp/rendiff
    depends_on:
      api:
        condition: service_healthy
    entrypoint: ["/app/scripts/docker-entrypoint.sh", "worker"]
    restart: unless-stopped

  # GPU Workers (optional)
  worker-gpu:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
      args:
        WORKER_TYPE: gpu
    deploy:
      replicas: ${GPU_WORKERS:-0}
    environment:
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - DATABASE_URL=${DATABASE_URL:-sqlite+aiosqlite:///data/rendiff.db}
      - EXTERNAL_URL=${EXTERNAL_URL:-http://localhost:8080}
      - WORKER_TYPE=gpu
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=video,compute,utility
    volumes:
      - ./config:/config:ro
      - ./data:/data
      - ./storage:/storage
      - ./tmp:/tmp/rendiff
    depends_on:
      api:
        condition: service_healthy
    entrypoint: ["/app/scripts/docker-entrypoint.sh", "worker"]
    restart: unless-stopped
    runtime: nvidia
    profiles:
      - gpu

  # Redis for task queue
  redis:
    image: redis:7-alpine
    container_name: rendiff-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: rendiff-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    profiles:
      - monitoring
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: rendiff-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    profiles:
      - monitoring
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    driver: bridge