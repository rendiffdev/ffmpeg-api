services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: ffmpeg_traefik
    command:
      - --configFile=/etc/traefik/traefik.yml
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - ./traefik/certs:/etc/traefik/certs:ro
    depends_on:
      - api
    networks:
      - ffmpeg-net
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls=true"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
  # Database Service
  postgres:
    image: postgres:15-alpine
    container_name: ffmpeg_postgres
    environment:
      - POSTGRES_DB=ffmpeg_api
      - POSTGRES_USER=ffmpeg_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-defaultpassword}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - ffmpeg-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ffmpeg_user -d ffmpeg_api"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Queue Service (Redis)
  redis:
    image: redis:7-alpine
    container_name: ffmpeg_redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - ffmpeg-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database Migration Service
  db-migrate:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    command: ["/app/scripts/docker-entrypoint.sh", "migrate"]
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://ffmpeg_user:defaultpassword@postgres:5432/ffmpeg_api}
      - PYTHONUNBUFFERED=1
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ffmpeg-net
    restart: "no"

  # API Service
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    container_name: ffmpeg_api
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://ffmpeg_user:defaultpassword@postgres:5432/ffmpeg_api}
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=info
      - PYTHONUNBUFFERED=1
      - API_HOST=0.0.0.0
      - API_PORT=8000
    volumes:
      - ./storage:/storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
    networks:
      - ffmpeg-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.services.api.loadbalancer.server.port=8000"

  # Worker Service - CPU Only
  worker:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
      args:
        - WORKER_TYPE=cpu
    container_name: ffmpeg_worker
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://ffmpeg_user:defaultpassword@postgres:5432/ffmpeg_api}
      - REDIS_URL=redis://redis:6379/0
      - WORKER_TYPE=cpu
      - WORKER_CONCURRENCY=4
      - LOG_LEVEL=info
      - PYTHONUNBUFFERED=1
    volumes:
      - ./storage:/storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ffmpeg-net
    restart: unless-stopped

networks:
  ffmpeg-net:
    driver: bridge

volumes:
  storage:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local