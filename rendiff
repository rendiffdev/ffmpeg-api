#!/usr/bin/env python3
"""
Rendiff - Unified Command Line Interface
Professional FFmpeg API Service CLI

Website: https://rendiff.dev
GitHub: https://github.com/rendiffdev/ffmpeg-api
Contact: dev@rendiff.dev
"""
import sys
import os
import subprocess
from pathlib import Path
from typing import Optional

import click
from rich.console import Console
from rich.table import Table
from rich.panel import Panel

# Add current directory to Python path for imports
sys.path.insert(0, str(Path(__file__).parent))

try:
    from setup.wizard import SetupWizard
    from setup.gpu_detector import GPUDetector
    from scripts.updater import RendiffUpdater
except ImportError as e:
    print(f"Error importing modules: {e}")
    print("Please ensure you're running from the Rendiff project directory")
    sys.exit(1)

console = Console()

@click.group()
@click.version_option(version="1.0.0", prog_name="Rendiff")
@click.option('--verbose', '-v', is_flag=True, help='Enable verbose output')
@click.pass_context
def cli(ctx, verbose):
    """
    Rendiff FFmpeg API Service - Unified CLI
    
    A comprehensive command-line tool for managing your Rendiff installation.
    """
    ctx.ensure_object(dict)
    ctx.obj['verbose'] = verbose
    
    if verbose:
        console.print("[dim]Verbose mode enabled[/dim]")


@cli.group()
def setup():
    """Setup and configuration commands"""
    pass


@cli.group()
def service():
    """Service management commands"""
    pass


@cli.group()
def storage():
    """Storage management commands"""
    pass


@cli.group()
def system():
    """System maintenance commands"""
    pass


# ============================================================================
# Setup Commands
# ============================================================================

@setup.command()
def wizard():
    """Run the interactive setup wizard"""
    console.print("[cyan]Starting Rendiff Setup Wizard...[/cyan]\n")
    
    try:
        wizard = SetupWizard()
        wizard.run()
    except KeyboardInterrupt:
        console.print("\n[yellow]Setup cancelled by user[/yellow]")
        sys.exit(1)
    except Exception as e:
        console.print(f"[red]Setup failed: {e}[/red]")
        sys.exit(1)


@setup.command()
def gpu():
    """Detect and configure GPU acceleration"""
    console.print("[cyan]Detecting GPU hardware...[/cyan]\n")
    
    detector = GPUDetector()
    gpu_info = detector.detect_gpus()
    
    # Display GPU information
    if gpu_info["has_gpu"]:
        table = Table(title="Detected GPUs")
        table.add_column("Index", style="cyan")
        table.add_column("Name")
        table.add_column("Type")
        table.add_column("Memory")
        
        for gpu in gpu_info["gpus"]:
            memory = f"{gpu.get('memory', 0)} MB" if gpu.get('memory') else "N/A"
            table.add_row(
                str(gpu["index"]),
                gpu["name"],
                gpu["type"].upper(),
                memory
            )
        
        console.print(table)
        
        # Show recommendations
        recommendations = detector.get_gpu_recommendations(gpu_info)
        if recommendations:
            console.print("\n[bold]Recommendations:[/bold]")
            for rec in recommendations:
                console.print(f"  • {rec}")
    else:
        console.print("[yellow]No GPU detected. CPU-only processing will be used.[/yellow]")
    
    # Check Docker GPU support
    docker_support = detector.check_docker_gpu_support()
    console.print("\n[bold]Docker GPU Support:[/bold]")
    console.print(f"  NVIDIA Runtime: {'✓' if docker_support['nvidia_runtime'] else '✗'}")
    console.print(f"  Container Toolkit: {'✓' if docker_support['nvidia_container_toolkit'] else '✗'}")


@setup.command()
@click.option('--storage-type', type=click.Choice(['local', 'nfs', 's3', 'azure', 'gcs', 'minio']))
def storage_test(storage_type):
    """Test storage backend connections"""
    if not storage_type:
        console.print("[yellow]Please specify a storage type to test[/yellow]")
        return
    
    console.print(f"[cyan]Testing {storage_type} storage connection...[/cyan]")
    
    # This would integrate with storage_tester.py
    console.print("[green]Storage test functionality available in wizard[/green]")
    console.print("Run 'rendiff setup wizard' for interactive storage configuration")


# ============================================================================
# Service Management Commands
# ============================================================================

@service.command()
@click.option('--profile', default='standard', type=click.Choice(['minimal', 'standard', 'full']))
def start(profile):
    """Start Rendiff services"""
    console.print(f"[cyan]Starting Rendiff services with '{profile}' profile...[/cyan]")
    
    try:
        env = os.environ.copy()
        env['COMPOSE_PROFILES'] = profile
        
        result = subprocess.run([
            'docker-compose', 'up', '-d'
        ], env=env, capture_output=True, text=True)
        
        if result.returncode == 0:
            console.print("[green]✓ Services started successfully[/green]")
            
            # Show running services
            _show_service_status()
        else:
            console.print(f"[red]Failed to start services: {result.stderr}[/red]")
            
    except FileNotFoundError:
        console.print("[red]Docker Compose not found. Please install Docker Compose.[/red]")
    except Exception as e:
        console.print(f"[red]Error starting services: {e}[/red]")


@service.command()
def stop():
    """Stop Rendiff services"""
    console.print("[cyan]Stopping Rendiff services...[/cyan]")
    
    try:
        result = subprocess.run([
            'docker-compose', 'down'
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            console.print("[green]✓ Services stopped successfully[/green]")
        else:
            console.print(f"[red]Failed to stop services: {result.stderr}[/red]")
            
    except Exception as e:
        console.print(f"[red]Error stopping services: {e}[/red]")


@service.command()
def restart():
    """Restart Rendiff services"""
    console.print("[cyan]Restarting Rendiff services...[/cyan]")
    
    try:
        # Stop services
        subprocess.run(['docker-compose', 'down'], capture_output=True)
        
        # Start services
        result = subprocess.run([
            'docker-compose', 'up', '-d'
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            console.print("[green]✓ Services restarted successfully[/green]")
            _show_service_status()
        else:
            console.print(f"[red]Failed to restart services: {result.stderr}[/red]")
            
    except Exception as e:
        console.print(f"[red]Error restarting services: {e}[/red]")


@service.command()
def status():
    """Show service status"""
    _show_service_status()


@service.command()
@click.option('--follow', '-f', is_flag=True, help='Follow log output')
@click.option('--service', help='Show logs for specific service')
@click.option('--tail', default=100, help='Number of lines to show from end of logs')
def logs(follow, service, tail):
    """View service logs"""
    cmd = ['docker-compose', 'logs']
    
    if follow:
        cmd.append('-f')
    
    cmd.extend(['--tail', str(tail)])
    
    if service:
        cmd.append(service)
    
    try:
        subprocess.run(cmd)
    except KeyboardInterrupt:
        pass
    except Exception as e:
        console.print(f"[red]Error viewing logs: {e}[/red]")


def _show_service_status():
    """Show status of Docker Compose services"""
    try:
        result = subprocess.run([
            'docker-compose', 'ps', '--format', 'table'
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            console.print("\n[bold]Service Status:[/bold]")
            console.print(result.stdout)
        else:
            console.print("[yellow]No services running or Docker Compose not found[/yellow]")
            
    except Exception as e:
        console.print(f"[yellow]Could not check service status: {e}[/yellow]")


# ============================================================================
# Storage Management Commands
# ============================================================================

@storage.command()
def list():
    """List configured storage backends"""
    config_file = Path("config/storage.yml")
    
    if not config_file.exists():
        console.print("[yellow]No storage configuration found. Run 'rendiff setup wizard' first.[/yellow]")
        return
    
    try:
        import yaml
        with open(config_file) as f:
            config = yaml.safe_load(f)
        
        if not config.get("storage", {}).get("backends"):
            console.print("[yellow]No storage backends configured[/yellow]")
            return
        
        table = Table(title="Configured Storage Backends")
        table.add_column("Name", style="cyan")
        table.add_column("Type")
        table.add_column("Location")
        table.add_column("Default", justify="center")
        
        default_backend = config["storage"].get("default_backend", "")
        
        for name, backend in config["storage"]["backends"].items():
            location = backend.get("base_path", backend.get("bucket", backend.get("server", "N/A")))
            is_default = "✓" if name == default_backend else "✗"
            
            table.add_row(name, backend["type"], location, is_default)
        
        console.print(table)
        
    except Exception as e:
        console.print(f"[red]Error reading storage configuration: {e}[/red]")


@storage.command()
@click.argument('backend_name')
def test(backend_name):
    """Test connection to a storage backend"""
    console.print(f"[cyan]Testing connection to '{backend_name}' storage backend...[/cyan]")
    
    # This would integrate with the storage tester
    console.print("[yellow]Storage testing functionality available in setup wizard[/yellow]")
    console.print("Run 'rendiff setup wizard' for interactive storage testing")


# ============================================================================
# System Maintenance Commands
# ============================================================================

@system.command()
@click.option('--channel', default='stable', type=click.Choice(['stable', 'beta']))
@click.option('--component', help='Update specific component only')
@click.option('--dry-run', is_flag=True, help='Show what would be updated without making changes')
def update(channel, component, dry_run):
    """Check for and install updates"""
    try:
        # Ensure we can import from the current directory
        import sys
        from pathlib import Path
        sys.path.insert(0, str(Path(__file__).parent))
        from scripts.system_updater import SystemUpdater
        system_updater = SystemUpdater()
        
        if component:
            # Update specific component
            console.print(f"[cyan]Updating component: {component}[/cyan]")
            result = system_updater.update_component(component, dry_run=dry_run)
            
            if result["success"]:
                console.print(f"[green]✓ Component {component} updated successfully[/green]")
                if result.get("rollback_info"):
                    console.print(f"[dim]Backup created: {result['rollback_info']['backup_id']}[/dim]")
            else:
                console.print(f"[red]✗ Component {component} update failed[/red]")
                return
        else:
            # Check for updates first
            updates = system_updater.check_updates()
            
            if not updates["available"]:
                console.print("[green]✓ System is up to date[/green]")
                return
            
            # Show available updates
            table = Table(title="Available Updates")
            table.add_column("Component", style="cyan")
            table.add_column("Current")
            table.add_column("Latest")
            table.add_column("Security", justify="center")
            
            for name, info in updates["components"].items():
                security = "🔒" if info["security"] else "○"
                table.add_row(name, info["current"], info["latest"], security)
            
            console.print(table)
            console.print(f"\n[cyan]Total updates: {updates['total_updates']}[/cyan]")
            
            if updates["security_updates"] > 0:
                console.print(f"[red]Security updates: {updates['security_updates']}[/red]")
            
            if not dry_run and not Confirm.ask("\nInstall all updates?", default=True):
                return
            
            # Perform system update
            result = system_updater.update_system(dry_run=dry_run)
            
            if result["success"]:
                console.print("[green]✓ System update completed successfully[/green]")
                if result.get("updated_components"):
                    console.print(f"[dim]Updated: {', '.join(result['updated_components'])}[/dim]")
                if result.get("system_backup"):
                    console.print(f"[dim]System backup: {result['system_backup']}[/dim]")
            else:
                console.print("[red]✗ System update failed[/red]")
                if result.get("failed_components"):
                    console.print(f"[red]Failed components: {', '.join(result['failed_components'])}[/red]")
                
    except ImportError:
        # Fallback to basic updater
        console.print("[yellow]Using basic update system...[/yellow]")
        updater = RendiffUpdater()
        
        update_info = updater.check_updates(channel)
        
        if update_info.get('available'):
            console.print(f"[green]Update available: v{update_info['latest']}[/green]")
            console.print(f"Current version: v{update_info['current']}")
            
            if not dry_run and click.confirm("Install update?"):
                backup_id = updater.create_backup("Pre-update backup")
                if backup_id:
                    console.print(f"[green]Backup created: {backup_id}[/green]")
                    console.print("[yellow]Advanced update system not available[/yellow]")
                else:
                    console.print("[red]Backup failed. Update cancelled for safety.[/red]")
        else:
            console.print("[green]✓ System is up to date[/green]")
    
    except Exception as e:
        console.print(f"[red]Update failed: {e}[/red]")


@system.command()
@click.option('--description', help='Backup description')
def backup(description):
    """Create system backup"""
    updater = RendiffUpdater()
    
    backup_id = updater.create_backup(description or "Manual backup")
    if backup_id:
        console.print(f"[green]✓ Backup created: {backup_id}[/green]")
    else:
        console.print("[red]Backup failed[/red]")
        sys.exit(1)


@system.command()
def backups():
    """List available backups"""
    updater = RendiffUpdater()
    backups = updater.list_backups()
    
    if not backups:
        console.print("[yellow]No backups found[/yellow]")
        return
    
    table = Table(title="Available Backups")
    table.add_column("Backup ID", style="cyan")
    table.add_column("Date")
    table.add_column("Version")
    table.add_column("Size")
    table.add_column("Status")
    table.add_column("Description")
    
    for backup in backups:
        size_mb = backup['size'] / (1024 * 1024)
        size_str = f"{size_mb:.1f} MB" if size_mb < 1024 else f"{size_mb/1024:.1f} GB"
        status = "[green]Valid[/green]" if backup['valid'] else "[red]Invalid[/red]"
        
        table.add_row(
            backup['id'],
            backup['timestamp'].replace('_', ' '),
            backup['version'],
            size_str,
            status,
            backup.get('description', '')
        )
    
    console.print(table)


@system.command()
@click.argument('backup_id')
def restore(backup_id):
    """Restore from backup"""
    updater = RendiffUpdater()
    
    success = updater.restore_backup(backup_id)
    if success:
        console.print("[green]✓ Restore completed successfully[/green]")
    else:
        console.print("[red]Restore failed[/red]")
        sys.exit(1)


@system.command()
@click.argument('backup_id')
def rollback(backup_id):
    """Rollback system update to previous state"""
    try:
        # Ensure we can import from the current directory
        import sys
        from pathlib import Path
        sys.path.insert(0, str(Path(__file__).parent))
        from scripts.system_updater import SystemUpdater
        system_updater = SystemUpdater()
        
        console.print(f"[yellow]Rolling back to backup: {backup_id}[/yellow]")
        
        if not Confirm.ask("This will stop all services and restore from backup. Continue?", default=False):
            console.print("[yellow]Rollback cancelled[/yellow]")
            return
        
        success = system_updater.rollback_update(backup_id)
        if success:
            console.print(f"[green]✓ Rollback to {backup_id} completed successfully[/green]")
        else:
            console.print(f"[red]✗ Rollback to {backup_id} failed[/red]")
            sys.exit(1)
            
    except ImportError:
        console.print("[red]Advanced rollback system not available[/red]")
        console.print("Use 'rendiff system restore' for basic restore functionality")
        sys.exit(1)
    except Exception as e:
        console.print(f"[red]Rollback failed: {e}[/red]")
        sys.exit(1)


@system.command()
def verify():
    """Verify system integrity"""
    updater = RendiffUpdater()
    results = updater.verify_system()
    
    table = Table(title="System Verification")
    table.add_column("Check", style="cyan")
    table.add_column("Status")
    table.add_column("Message")
    
    for check_name, check_result in results['checks'].items():
        status_color = {
            'pass': 'green',
            'fail': 'red',
            'error': 'yellow'
        }.get(check_result['status'], 'white')
        
        table.add_row(
            check_name.replace('_', ' ').title(),
            f"[{status_color}]{check_result['status'].upper()}[/{status_color}]",
            check_result['message']
        )
    
    console.print(table)
    
    if results['overall']:
        console.print("\n[green]✓ System verification passed[/green]")
    else:
        console.print("\n[red]✗ System verification failed[/red]")
        console.print("[yellow]Run 'rendiff system repair' to attempt fixes[/yellow]")


@system.command()
def repair():
    """Attempt automatic system repair"""
    updater = RendiffUpdater()
    
    success = updater.repair_system()
    if success:
        console.print("[green]✓ System repair completed[/green]")
    else:
        console.print("[yellow]Some issues could not be automatically repaired[/yellow]")


@system.command()
@click.option('--keep', default=5, help='Number of backups to keep')
def cleanup(keep):
    """Clean up old backups"""
    updater = RendiffUpdater()
    
    deleted = updater.cleanup_backups(keep)
    console.print(f"[green]✓ Cleaned up {deleted} old backups[/green]")


# ============================================================================
# FFmpeg Commands
# ============================================================================

@cli.group()
def ffmpeg():
    """FFmpeg management and diagnostics"""
    pass


@ffmpeg.command()
def version():
    """Show FFmpeg version and build information"""
    try:
        result = subprocess.run([
            'docker-compose', 'exec', '-T', 'worker-cpu', 'ffmpeg', '-version'
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            console.print("[cyan]FFmpeg Version Information:[/cyan]")
            console.print(result.stdout)
        else:
            console.print("[yellow]FFmpeg not available in containers[/yellow]")
            console.print("Try: rendiff service start")
    except Exception as e:
        console.print(f"[red]Error checking FFmpeg version: {e}[/red]")


@ffmpeg.command()
def codecs():
    """List available codecs and formats"""
    try:
        # Get codecs
        result = subprocess.run([
            'docker-compose', 'exec', '-T', 'worker-cpu', 'ffmpeg', '-codecs'
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            console.print("[cyan]Available Codecs:[/cyan]")
            # Parse and display codec information in a more readable format
            lines = result.stdout.split('\n')
            codec_lines = [line for line in lines if line.startswith(' ') and ('V' in line or 'A' in line)]
            
            table = Table(title="Popular Codecs")
            table.add_column("Type", style="cyan")
            table.add_column("Codec")
            table.add_column("Description")
            
            popular_codecs = ['h264', 'h265', 'vp9', 'av1', 'aac', 'mp3', 'opus']
            for line in codec_lines[:50]:  # Limit output
                parts = line.split()
                if len(parts) >= 3:
                    codec_name = parts[1]
                    if any(pop in codec_name.lower() for pop in popular_codecs):
                        codec_type = "Video" if 'V' in line else "Audio"
                        description = ' '.join(parts[2:]) if len(parts) > 2 else ""
                        table.add_row(codec_type, codec_name, description[:50])
            
            console.print(table)
        else:
            console.print("[yellow]Could not retrieve codec information[/yellow]")
    except Exception as e:
        console.print(f"[red]Error listing codecs: {e}[/red]")


@ffmpeg.command()
def formats():
    """List supported input/output formats"""
    try:
        result = subprocess.run([
            'docker-compose', 'exec', '-T', 'worker-cpu', 'ffmpeg', '-formats'
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            console.print("[cyan]Supported Formats:[/cyan]")
            
            lines = result.stdout.split('\n')
            format_lines = [line for line in lines if line.startswith(' ') and ('E' in line or 'D' in line)]
            
            table = Table(title="Popular Formats")
            table.add_column("Support", style="cyan")
            table.add_column("Format")
            table.add_column("Description")
            
            popular_formats = ['mp4', 'webm', 'mkv', 'mov', 'avi', 'flv', 'hls', 'dash']
            for line in format_lines[:30]:  # Limit output
                parts = line.split(None, 2)
                if len(parts) >= 2:
                    support = parts[0]
                    format_name = parts[1]
                    if any(pop in format_name.lower() for pop in popular_formats):
                        description = parts[2] if len(parts) > 2 else ""
                        table.add_row(support, format_name, description[:50])
            
            console.print(table)
        else:
            console.print("[yellow]Could not retrieve format information[/yellow]")
    except Exception as e:
        console.print(f"[red]Error listing formats: {e}[/red]")


@ffmpeg.command()
def capabilities():
    """Show FFmpeg hardware acceleration capabilities"""
    console.print("[cyan]Checking FFmpeg capabilities...[/cyan]")
    
    try:
        # Check hardware acceleration
        result = subprocess.run([
            'docker-compose', 'exec', '-T', 'worker-cpu', 'ffmpeg', '-hwaccels'
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            console.print("\n[bold]Hardware Acceleration:[/bold]")
            hwaccels = [line.strip() for line in result.stdout.split('\n') if line.strip() and not line.startswith('Hardware')]
            
            table = Table(title="Available Hardware Acceleration")
            table.add_column("Type", style="cyan")
            table.add_column("Status")
            
            common_hwaccels = ['cuda', 'vaapi', 'qsv', 'videotoolbox', 'dxva2']
            for hwaccel in common_hwaccels:
                status = "✓ Available" if hwaccel in hwaccels else "✗ Not Available"
                color = "green" if hwaccel in hwaccels else "red"
                table.add_row(hwaccel.upper(), f"[{color}]{status}[/{color}]")
            
            console.print(table)
        
        # Check GPU availability in container
        console.print("\n[bold]GPU Support:[/bold]")
        gpu_result = subprocess.run([
            'docker-compose', 'exec', '-T', 'worker-cpu', 'nvidia-smi', '--query-gpu=name', '--format=csv,noheader'
        ], capture_output=True, text=True, timeout=5)
        
        if gpu_result.returncode == 0:
            console.print(f"[green]✓ NVIDIA GPU detected: {gpu_result.stdout.strip()}[/green]")
        else:
            console.print("[yellow]○ No NVIDIA GPU detected in container[/yellow]")
            
    except Exception as e:
        console.print(f"[red]Error checking capabilities: {e}[/red]")


@ffmpeg.command()
@click.argument('input_file')
def probe(input_file):
    """Probe media file for technical information"""
    console.print(f"[cyan]Probing file: {input_file}[/cyan]")
    
    try:
        # Use ffprobe to analyze the file
        result = subprocess.run([
            'docker-compose', 'exec', '-T', 'worker-cpu', 
            'ffprobe', '-v', 'quiet', '-print_format', 'json', '-show_format', '-show_streams',
            input_file
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            import json
            probe_data = json.loads(result.stdout)
            
            # Display format information
            if 'format' in probe_data:
                format_info = probe_data['format']
                console.print(f"\n[bold]Format Information:[/bold]")
                console.print(f"  Format: {format_info.get('format_name', 'Unknown')}")
                console.print(f"  Duration: {format_info.get('duration', 'Unknown')} seconds")
                console.print(f"  Size: {format_info.get('size', 'Unknown')} bytes")
                console.print(f"  Bitrate: {format_info.get('bit_rate', 'Unknown')} bps")
            
            # Display stream information
            if 'streams' in probe_data:
                for i, stream in enumerate(probe_data['streams']):
                    console.print(f"\n[bold]Stream {i} ({stream.get('codec_type', 'unknown')}):[/bold]")
                    console.print(f"  Codec: {stream.get('codec_name', 'Unknown')}")
                    
                    if stream.get('codec_type') == 'video':
                        console.print(f"  Resolution: {stream.get('width', '?')}x{stream.get('height', '?')}")
                        console.print(f"  Frame Rate: {stream.get('r_frame_rate', 'Unknown')}")
                        console.print(f"  Pixel Format: {stream.get('pix_fmt', 'Unknown')}")
                    elif stream.get('codec_type') == 'audio':
                        console.print(f"  Sample Rate: {stream.get('sample_rate', 'Unknown')} Hz")
                        console.print(f"  Channels: {stream.get('channels', 'Unknown')}")
                        console.print(f"  Channel Layout: {stream.get('channel_layout', 'Unknown')}")
        else:
            console.print(f"[red]Error probing file: {result.stderr}[/red]")
            
    except Exception as e:
        console.print(f"[red]Error running probe: {e}[/red]")


@ffmpeg.command()
def benchmark():
    """Run FFmpeg performance benchmark"""
    console.print("[cyan]Running FFmpeg performance benchmark...[/cyan]")
    
    try:
        # Create a test video and transcode it
        console.print("Creating test video...")
        create_test = subprocess.run([
            'docker-compose', 'exec', '-T', 'worker-cpu',
            'ffmpeg', '-f', 'lavfi', '-i', 'testsrc=duration=10:size=1920x1080:rate=30',
            '-c:v', 'libx264', '-preset', 'fast', '-f', 'mp4', '/tmp/test_input.mp4', '-y'
        ], capture_output=True, text=True, timeout=30)
        
        if create_test.returncode != 0:
            console.print("[red]Failed to create test video[/red]")
            return
        
        console.print("Running transcoding benchmark...")
        # Benchmark H.264 encoding
        import time
        start_time = time.time()
        
        result = subprocess.run([
            'docker-compose', 'exec', '-T', 'worker-cpu',
            'ffmpeg', '-i', '/tmp/test_input.mp4', '-c:v', 'libx264', '-preset', 'medium',
            '-f', 'mp4', '/tmp/test_output.mp4', '-y'
        ], capture_output=True, text=True, timeout=60)
        
        end_time = time.time()
        processing_time = end_time - start_time
        
        if result.returncode == 0:
            console.print(f"[green]✓ Benchmark completed in {processing_time:.2f} seconds[/green]")
            console.print(f"Performance: {10/processing_time:.2f}x realtime")
            
            # Extract encoding speed from ffmpeg output
            if 'speed=' in result.stderr:
                speed_match = result.stderr.split('speed=')[-1].split('x')[0].strip()
                console.print(f"FFmpeg reported speed: {speed_match}x")
        else:
            console.print(f"[red]Benchmark failed: {result.stderr}[/red]")
            
        # Cleanup
        subprocess.run([
            'docker-compose', 'exec', '-T', 'worker-cpu',
            'rm', '-f', '/tmp/test_input.mp4', '/tmp/test_output.mp4'
        ], capture_output=True)
        
    except Exception as e:
        console.print(f"[red]Benchmark error: {e}[/red]")


# ============================================================================
# Utility Commands
# ============================================================================

@cli.command()
def info():
    """Show system information"""
    console.print(Panel.fit(
        "[bold cyan]Rendiff FFmpeg API Service[/bold cyan]\n"
        "Professional video processing platform\n\n"
        "[dim]Use 'rendiff --help' to see all available commands[/dim]",
        border_style="cyan"
    ))
    
    # Show version and status
    try:
        version_file = Path("VERSION")
        if version_file.exists():
            version = version_file.read_text().strip()
            console.print(f"\n[cyan]Version:[/cyan] {version}")
    except:
        pass
    
    # Show service status
    console.print(f"\n[cyan]Services:[/cyan]")
    _show_service_status()


@cli.command()
def health():
    """Check API health"""
    console.print("[cyan]Checking API health...[/cyan]")
    
    try:
        import requests
        response = requests.get("http://localhost:8080/api/v1/health", timeout=5)
        
        if response.status_code == 200:
            console.print("[green]✓ API is healthy[/green]")
            
            data = response.json()
            console.print(f"Status: {data.get('status', 'unknown')}")
            console.print(f"Version: {data.get('version', 'unknown')}")
        else:
            console.print(f"[yellow]API returned status {response.status_code}[/yellow]")
            
    except requests.exceptions.ConnectionError:
        console.print("[red]✗ Cannot connect to API. Is it running?[/red]")
        console.print("Try: rendiff service start")
    except Exception as e:
        console.print(f"[red]Health check failed: {e}[/red]")


@cli.command()
@click.option('--output', '-o', help='Output format', type=click.Choice(['json', 'yaml']), default='yaml')
def config(output):
    """Show current configuration"""
    config_file = Path("config/storage.yml")
    
    if not config_file.exists():
        console.print("[yellow]No configuration found. Run 'rendiff setup wizard' first.[/yellow]")
        return
    
    try:
        import yaml
        with open(config_file) as f:
            config_data = yaml.safe_load(f)
        
        if output == 'json':
            import json
            console.print(json.dumps(config_data, indent=2))
        else:
            console.print(yaml.dump(config_data, default_flow_style=False))
            
    except Exception as e:
        console.print(f"[red]Error reading configuration: {e}[/red]")


if __name__ == '__main__':
    cli()