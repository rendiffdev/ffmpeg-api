# Docker Compose format version is no longer required in Compose v2+
# Production-Ready FFmpeg API Deployment
# This configuration includes health checks, resource limits, and production settings

name: ffmpeg-api-prod

services:
  # API Service
  api:
    build: 
      context: .
      dockerfile: docker/api/Dockerfile
    container_name: rendiff-api
    restart: unless-stopped
    # Ports handled by Traefik - no direct exposure needed
    environment:
      # Basic Configuration
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_WORKERS=${API_WORKERS:-4}
      - EXTERNAL_URL=${EXTERNAL_URL:-https://localhost}
      
      # Database
      - DATABASE_URL=${DATABASE_URL}
      
      # Queue
      - REDIS_URL=${REDIS_URL}
      
      # Security
      - ENABLE_API_KEYS=${ENABLE_API_KEYS:-true}
      - DEBUG=false
      
      # Storage
      - STORAGE_CONFIG=/config/storage.yml
      
      # Resources
      - MAX_UPLOAD_SIZE=${MAX_UPLOAD_SIZE:-10737418240}
      - MAX_CONCURRENT_JOBS_PER_KEY=${MAX_CONCURRENT_JOBS_PER_KEY:-10}
      - MAX_JOB_DURATION=${MAX_JOB_DURATION:-3600}
      
      # Setup
      - RENDIFF_AUTO_SETUP=${RENDIFF_AUTO_SETUP:-false}
      
    volumes:
      - ./config:/config
      - ./data:/data
      - ./storage:/storage
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    networks:
      - ffmpeg-api-network
    labels:
      # Enable Traefik for this service
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${DOMAIN_NAME:-localhost}`) && PathPrefix(`/`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.service=api"
      - "traefik.http.routers.api.middlewares=api-middleware"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
      - "traefik.http.services.api.loadbalancer.healthcheck.path=/api/v1/health"
      - "traefik.http.middlewares.api-middleware.chain.middlewares=security-headers,api-rate-limit,compression"

  # CPU Workers
  worker-cpu:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
      args:
        WORKER_TYPE: cpu
    restart: unless-stopped
    environment:
      - REDIS_URL=${REDIS_URL}
      - DATABASE_URL=${DATABASE_URL}
      - WORKER_TYPE=cpu
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-4}
    volumes:
      - ./config:/config:ro
      - ./data:/data
      - ./storage:/storage
      - ./tmp:/tmp/rendiff
    depends_on:
      api:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "worker.main", "inspect", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
    deploy:
      replicas: ${CPU_WORKERS:-2}
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    networks:
      - ffmpeg-api-network

  # GPU Workers (optional)
  worker-gpu:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
      args:
        WORKER_TYPE: gpu
    restart: unless-stopped
    environment:
      - REDIS_URL=${REDIS_URL}
      - DATABASE_URL=${DATABASE_URL}
      - WORKER_TYPE=gpu
      - WORKER_CONCURRENCY=${GPU_WORKER_CONCURRENCY:-2}
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=video,compute,utility
    volumes:
      - ./config:/config:ro
      - ./data:/data
      - ./storage:/storage
      - ./tmp:/tmp/rendiff
    depends_on:
      api:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "worker.main", "inspect", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
    deploy:
      replicas: ${GPU_WORKERS:-0}
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    runtime: nvidia
    profiles:
      - gpu
    networks:
      - ffmpeg-api-network

  # Redis for task queue
  redis:
    image: redis:7-alpine
    container_name: rendiff-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    # ports:
    #   - "${REDIS_PORT:-6379}:6379"  # Remove port exposure for security
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    networks:
      - ffmpeg-api-network

  # PostgreSQL (for production - optional)
  postgres:
    image: postgres:15-alpine
    container_name: rendiff-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-rendiff}
      - POSTGRES_USER=${POSTGRES_USER:-rendiff}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # ports:
    #   - "${POSTGRES_PORT:-5432}:5432"  # Remove port exposure for security
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-rendiff}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    profiles:
      - postgres
    networks:
      - ffmpeg-api-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v2.54.0
    container_name: rendiff-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    profiles:
      - monitoring
    networks:
      - ffmpeg-api-network
    labels:
      # Enable Traefik for this service
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN_NAME:-localhost}`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.service=prometheus"
      - "traefik.http.routers.prometheus.middlewares=security-headers"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:11.2.0
    container_name: rendiff-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    profiles:
      - monitoring
    networks:
      - ffmpeg-api-network
    labels:
      # Enable Traefik for this service
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN_NAME:-localhost}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.service=grafana"
      - "traefik.http.routers.grafana.middlewares=security-headers"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Traefik reverse proxy (recommended for production)
  traefik:
    image: traefik:v3.1
    container_name: rendiff-traefik
    restart: unless-stopped
    command:
      - --configFile=/etc/traefik/traefik.yml
    ports:
      - "${TRAEFIK_HTTP_PORT:-80}:80"
      - "${TRAEFIK_HTTPS_PORT:-443}:443"
      - "${TRAEFIK_DASHBOARD_PORT:-8081}:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - ./traefik/certs:/etc/traefik/certs:ro
      - traefik_ssl_data:/letsencrypt
      - traefik_logs:/var/log/traefik
    environment:
      - CERTBOT_EMAIL=${CERTBOT_EMAIL:-admin@localhost}
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}
      - CERT_RESOLVER=${CERT_RESOLVER:-letsencrypt}
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    # No profile - Traefik runs by default for HTTPS
    networks:
      - ffmpeg-api-network
    labels:
      # Enable Traefik for the dashboard
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN_NAME:-localhost}`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls=true"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  traefik_ssl_data:
    driver: local
  traefik_logs:
    driver: local

networks:
  ffmpeg-api-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-ffmpeg-api
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1