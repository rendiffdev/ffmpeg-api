# syntax=docker/dockerfile:1

# Build stage
FROM python:3.12-slim AS builder

# Install build dependencies with specific versions
RUN apt-get update && apt-get install -y \
    gcc=4:11.* \
    g++=4:11.* \
    git=1:2.34.* \
    pkg-config=0.29.* \
    libgl1-mesa-dev=22.* \
    libglib2.0-0=2.72.* \
    libsm6=2:1.2.* \
    libxext6=2:1.3.* \
    libxrender-dev=1:0.9.* \
    libgomp1=11.* \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements first for better layer caching
COPY requirements.txt requirements-genai.txt ./
RUN pip install --no-cache-dir --upgrade pip==24.* \
    && pip install --no-cache-dir -r requirements.txt \
    && pip install --no-cache-dir -r requirements-genai.txt

# Runtime stage with NVIDIA CUDA support
FROM nvidia/cuda:12.4.1-runtime-ubuntu22.04 AS runtime

# Set labels for better maintainability
LABEL maintainer="rendiff-team" \
      version="1.0" \
      description="FFmpeg API Worker with GenAI" \
      org.opencontainers.image.source="https://github.com/rendiffdev/ffmpeg-api"

# Install Python and runtime dependencies with specific versions
RUN apt-get update && apt-get install -y \
    python3.12=3.12.* \
    python3.12-venv=3.12.* \
    python3-pip=22.* \
    curl=7.81.* \
    xz-utils=5.2.* \
    netcat-openbsd=1.217.* \
    postgresql-client=14+* \
    ca-certificates=20211016* \
    tini=0.19.* \
    libgl1-mesa-glx=22.* \
    libglib2.0-0=2.72.* \
    libsm6=2:1.2.* \
    libxext6=2:1.3.* \
    libxrender1=1:0.9.* \
    libgomp1=11.* \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set up Python aliases
RUN ln -s /usr/bin/python3.12 /usr/bin/python \
    && ln -s /usr/bin/pip3 /usr/bin/pip

# Install latest FFmpeg from BtbN/FFmpeg-Builds
COPY docker/install-ffmpeg.sh /tmp/install-ffmpeg.sh
RUN chmod +x /tmp/install-ffmpeg.sh \
    && /tmp/install-ffmpeg.sh \
    && rm /tmp/install-ffmpeg.sh

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Create app user with specific UID/GID for better security
RUN groupadd -r -g 1000 rendiff \
    && useradd -r -m -u 1000 -g rendiff -s /bin/bash rendiff

# Create directories with proper permissions
RUN mkdir -p /app /storage /config /data /app/logs /app/temp /app/metrics /app/models/genai /tmp/rendiff \
    && chown -R rendiff:rendiff /app /storage /config /data /tmp/rendiff

# Set working directory
WORKDIR /app

# Copy application code
COPY --chown=rendiff:rendiff api/ /app/api/
COPY --chown=rendiff:rendiff worker/ /app/worker/
COPY --chown=rendiff:rendiff storage/ /app/storage/

# Copy scripts for setup and maintenance
COPY --chown=rendiff:rendiff scripts/ /app/scripts/
RUN chmod +x /app/scripts/*.sh

# Set environment variables for GPU support
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=video,compute,utility
ENV CUDA_VISIBLE_DEVICES=all

# PyTorch CUDA configuration
ENV PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
ENV CUDA_LAUNCH_BLOCKING=0

# Switch to non-root user
USER rendiff

# Health check with better configuration
HEALTHCHECK --interval=60s --timeout=30s --start-period=180s --retries=3 \
    CMD celery -A worker.main inspect ping -t 10 || exit 1

# Use tini as PID 1 for proper signal handling
ENTRYPOINT ["/usr/bin/tini", "--"]

# Run the worker
CMD ["/app/scripts/docker-entrypoint.sh", "worker"]