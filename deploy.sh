#!/bin/bash
# Rendiff FFmpeg API - Production Deployment Script

set -e

echo "üöÄ Rendiff FFmpeg API - Production Deployment"
echo "=============================================="

# Configuration
DEPLOY_TYPE=${1:-standard}
ENV_FILE=${2:-.env}

# Check if .env file exists
if [ ! -f "$ENV_FILE" ]; then
    echo "‚ùå Environment file $ENV_FILE not found"
    echo "üìù Please copy .env.example to .env and configure it"
    echo "   cp .env.example .env"
    exit 1
fi

# Load environment variables
set -a
source "$ENV_FILE"
set +a

echo "üìã Deployment Configuration:"
echo "   Type: $DEPLOY_TYPE"
echo "   Environment: $ENV_FILE"
echo "   Storage Backend: ${STORAGE_BACKEND:-local}"
echo "   GenAI Enabled: ${GENAI_ENABLED:-false}"

# Validate configuration
if [ "$DEPLOY_TYPE" = "genai" ] && [ "${GENAI_ENABLED:-false}" != "true" ]; then
    echo "‚ùå GenAI deployment requested but GENAI_ENABLED is not true"
    echo "   Please set GENAI_ENABLED=true in your .env file"
    exit 1
fi

# Check Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker is not installed"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose is not installed"
    exit 1
fi

# Check GPU requirements for GenAI
if [ "$DEPLOY_TYPE" = "genai" ]; then
    echo "üîç Checking GPU requirements for GenAI deployment..."
    
    if ! command -v nvidia-smi &> /dev/null; then
        echo "‚ö†Ô∏è nvidia-smi not found. GPU acceleration may not be available."
    else
        echo "‚úÖ NVIDIA GPU detected:"
        nvidia-smi --query-gpu=name,memory.total --format=csv,noheader,nounits | head -1
    fi
    
    # Check for NVIDIA Container Runtime
    if ! docker info | grep -q nvidia; then
        echo "‚ö†Ô∏è NVIDIA Container Runtime not detected"
        echo "   GenAI features will fall back to CPU (slower performance)"
    fi
fi

# Create required directories
echo "üìÅ Creating required directories..."
mkdir -p ./storage ./models/genai ./logs

# Pull latest images
echo "üê≥ Pulling Docker images..."
if [ "$DEPLOY_TYPE" = "genai" ]; then
    docker-compose -f docker-compose.genai.yml pull
else
    docker-compose pull
fi

# Stop existing containers
echo "üõë Stopping existing containers..."
docker-compose down 2>/dev/null || true
if [ "$DEPLOY_TYPE" = "genai" ]; then
    docker-compose -f docker-compose.genai.yml down 2>/dev/null || true
fi

# Deploy based on type
if [ "$DEPLOY_TYPE" = "genai" ]; then
    echo "ü§ñ Deploying with GenAI features..."
    
    # Download AI models if needed
    if [ ! -d "./models/genai" ] || [ -z "$(ls -A ./models/genai)" ]; then
        echo "üì• Downloading AI models (this may take a while)..."
        docker-compose -f docker-compose.yml -f docker-compose.genai.yml --profile setup up model-downloader
    fi
    
    # Start GenAI-enabled services (migrations run automatically)
    docker-compose -f docker-compose.yml -f docker-compose.genai.yml up -d
    
    echo "‚úÖ GenAI deployment complete!"
    echo "üåê API: http://localhost:8080"
    echo "üìä Docs: http://localhost:8080/docs"
    echo "ü§ñ GenAI: http://localhost:8080/api/genai/v1/"
    echo "üìà Monitoring: http://localhost:3000"
    
else
    echo "üé¨ Deploying standard FFmpeg API..."
    
    # Start standard services (migrations run automatically)
    docker-compose up -d
    
    echo "‚úÖ Standard deployment complete!"
    echo "üåê API: http://localhost:8080"
    echo "üìä Docs: http://localhost:8080/docs"
    echo "üìà Monitoring: http://localhost:3000"
fi

# Wait for services to be ready
echo "‚è≥ Waiting for services to be ready..."
sleep 10

# Health check
echo "üè• Performing health check..."
if curl -s "http://localhost:8080/api/v1/health" > /dev/null; then
    echo "‚úÖ API is healthy and ready!"
else
    echo "‚ùå API health check failed"
    echo "üìã Check logs: docker-compose logs api"
    exit 1
fi

# GenAI health check
if [ "$DEPLOY_TYPE" = "genai" ]; then
    if curl -s "http://localhost:8080/api/genai/v1/analyze/health" > /dev/null; then
        echo "‚úÖ GenAI services are healthy!"
    else
        echo "‚ö†Ô∏è GenAI health check failed (services may still be initializing)"
        echo "üìã Check logs: docker-compose logs worker-genai"
    fi
fi

echo ""
echo "üéâ Deployment successful!"
echo ""
echo "üìö Next steps:"
echo "   ‚Ä¢ View API documentation: http://localhost:8080/docs"
echo "   ‚Ä¢ Monitor system: http://localhost:3000"
echo "   ‚Ä¢ View logs: docker-compose logs -f"
echo "   ‚Ä¢ Scale workers: docker-compose up -d --scale worker=4"
if [ "$DEPLOY_TYPE" = "genai" ]; then
    echo "   ‚Ä¢ Scale AI workers: docker-compose -f docker-compose.genai.yml up -d --scale worker-genai=2"
fi
echo ""
echo "üîß Management commands:"
echo "   ‚Ä¢ Update: ./deploy.sh $DEPLOY_TYPE"
echo "   ‚Ä¢ Stop: docker-compose down"
echo "   ‚Ä¢ View status: docker-compose ps"